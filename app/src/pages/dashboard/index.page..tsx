import { GetServerSideProps } from 'next'
import Link from 'next/link'
import { parseCookies } from 'nookies'
import Router from 'next/router'
import Head from 'next/head'

import { api, getApiClient } from 'services/axios'
// types
import { deletePartiesRequest, PartyProps } from 'services/party'
// styles
import { Button } from 'assets/styles/buttons'
import { Wrapper } from './styles'
import Table from 'components/Table'
import { useState } from 'react'
import { Alert } from 'assets/styles/alert'

type DashboardProps = {
  partiesSSR: PartyProps[]
}

const Dashboard = ({ partiesSSR }: DashboardProps) => {
  const [parties, setParties] = useState(partiesSSR)
  const [alert, setAlert] = useState<{msg: string, type?: string} | null>()

  const handleDeleteParties = async (id: string) => {
    const { msg, error } = await deletePartiesRequest(id)

    if (error) {
      setAlert({ msg, type: 'danger' })
      return
    }

    const partiesFilter = parties.filter(party => party._id !== id)

    setParties(partiesFilter)
  }

  return (
    <div>
      <Head>
        <title>Partytime | Acompanhe suas festas!</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Wrapper className='container'>
        <div className='d-flex justify-content-between'>
          <h1>Dashboard</h1>
          <Button onClick={() => Router.push('party/create')}>Criar festa</Button>
        </div>
        {alert ? <Alert type={alert?.type}>{alert?.msg}</Alert> : null}
          {parties && parties.length > 0
            ? <div>
                <Table
                  handleDeleteParties={handleDeleteParties}
                  parties={parties}
                />
              </div>
            : <div>
                <h4>Você não tem nenhuma festa! <Link href="/party/create">Crie uma festa aqui!</Link></h4>
              </div>
          }
      </Wrapper>
    </div>
  )
}

export default Dashboard

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const { 'auth-token': token } = parseCookies(ctx)

  const apiClient = getApiClient(ctx)

  if (!token) {
    return {
      redirect: {
        destination: '/',
        permanent: false
      }
    }
  }

  const response = await apiClient.get('api/party/user')

  return {
    props: {
      partiesSSR: response.data.parties
    }
  }
}
